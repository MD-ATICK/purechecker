datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
}

// user, credit , email verify object , valume , subscription, blog

model Anonymous {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  device   String
  credit    Int      @default(19)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  username      String?       @unique
  email         String?       @unique
  ip            String?
  emailVerified DateTime?
  password      String?
  image         String?
  banned        Boolean       @default(false)
  role          Role          @default(USER)
  verifyEmails  VerifyEmail[]
  credits       Credit[]
  blogs         Blog[]
  volumes       Volume[]
  apis          ApiToken[]

  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  customerId    String?
  // extarnal
  mobile        String?
  country       String?
  city          String?
  state         String?
  address       String?

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  purchases     Purchase[]
  subscriptions Subscription[]
  uploadFiles   UploadFile[]
}

enum CreditType {
  DEFAULT
  PURCHASE
  SUBSCRIPTION
}

enum VolumeType {
  PURCHASE
  SUBSCRIPTION
}

model Blog {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  image       String
  title       String
  slug        String   @default("not-found")
  category    String
  description String
  tags        String[]
  htmlContent String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String?  @db.ObjectId
}

model Credit {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  User      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String     @unique @db.ObjectId
  credit    Int        @default(0)
  paymentId String?
  type      CreditType @default(DEFAULT)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Volume {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  type           VolumeType     @default(PURCHASE)
  amount         Float
  perCreditPrice Float
  discount       Float
  credit         Int
  dailyCredit    Int?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  paddlePriceId  String
  User           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String         @db.ObjectId
  subscriptions  Subscription[]
  purchases      Purchase[]
}

type MxRecord {
  exchange String
  priority Int
}

enum typeEmailDataDashboard {
  DELIVERABLE
  UNDELIVERABLE
  API_USAGE
}

type EmailDataDashboard {
  email     String
  type      typeEmailDataDashboard
  checkedAt DateTime               @default(now())
}

model userDashboardData {
  id                  String               @id @default(auto()) @map("_id") @db.ObjectId
  userId              String               @db.ObjectId
  apiUsagesEmails     EmailDataDashboard[]
  deliverableEmails   EmailDataDashboard[]
  undeliverableEmails EmailDataDashboard[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

model ApiToken {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  apiName         String
  apiRequestLimit Int?
  secretKey       String
  User            User?         @relation(fields: [userId], references: [id])
  userId          String?       @db.ObjectId
  verifyEmails    VerifyEmail[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model VerifyEmail {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  email         String // remain. it's checking email not user email.
  domain        String
  reason        String
  isExist       Boolean     @default(false)
  isDisposable  Boolean     @default(false)
  isValidSyntax Boolean     @default(false)
  isValidDomain Boolean     @default(false)
  riskLevel     String
  free          Boolean     @default(false)
  role          String
  mxRecords     MxRecord[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  User          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String      @db.ObjectId
  ApiToken      ApiToken?   @relation(fields: [apiTokenId], references: [id])
  apiTokenId    String?     @db.ObjectId
  UploadFile    UploadFile? @relation(fields: [uploadFileId], references: [id])
  uploadFileId  String?     @db.ObjectId
}

enum UploadFileStatus {
  PENDING
  COMPLETED
}

model UploadFile {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  enterEmails   String[]
  fileName      String
  fileType      String
  status        UploadFileStatus
  fileSize      Float
  checkedEmails VerifyEmail[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  User          User?            @relation(fields: [userId], references: [id])
  userId        String?          @db.ObjectId
}

enum SubscriptionStatusEnum {
  active
  canceled
  paused
  past_due
  trialing
}

model Order {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  type            VolumeType
  amount          Float
  credit          Float
  name            String
  email           String
  paddlePaymentId String
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model Purchase {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  User                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String   @db.ObjectId
  volumeId            String   @db.ObjectId
  volume              Volume   @relation(fields: [volumeId], references: [id], onDelete: Cascade)
  paddleTransactionId String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

enum billingCycleIntervalEnum {
  day
  week
  month
  year
}

model Subscription {
  id                         String                   @id @default(auto()) @map("_id") @db.ObjectId
  User                       User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                     String                   @db.ObjectId
  volumeId                   String                   @db.ObjectId
  volume                     Volume                   @relation(fields: [volumeId], references: [id], onDelete: Cascade)
  paddleSubscriptionId       String
  subscriptionScheduleChange Boolean
  billingCycleInterval       billingCycleIntervalEnum
  status                     SubscriptionStatusEnum
  currentPeriodStart         DateTime
  currentPeriodEnd           DateTime
  createdAt                  DateTime                 @default(now())
  updatedAt                  DateTime                 @updatedAt
}

enum CronJobEnum {
  subscription
  free
}

model CronJob {
  id                  String      @id @default(auto()) @map("_id") @db.ObjectId
  type                CronJobEnum
  detectedUsers       String[]
  executedUsers       String[]
  detectedUsersLength Int
  executedUsersLength Int
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
}

// * ----------------------------------------------------------------------------- 
// * ----------------------------------------------------------------------------- 

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String
  expires DateTime

  @@unique([email, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}
